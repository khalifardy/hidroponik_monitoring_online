Untuk mengambil data secara realtime dari micropython ke fastapi, Anda dapat menggunakan protokol HTTP dan WebSocket yang disediakan oleh FastAPI.

Pertama-tama, pastikan Anda telah menginstal library `uasyncio` pada micropython. Kemudian, Anda dapat melakukan koneksi ke server FastAPI menggunakan modul `usocket` dan `ujson`. Berikut adalah contoh kode untuk mengirimkan data ke server FastAPI melalui protokol HTTP:

```python
import ujson
import usocket

def send_data(data):
    # konversi data menjadi JSON string
    data_json = ujson.dumps(data)

    # buka koneksi ke server FastAPI
    s = usocket.socket()
    addr = usocket.getaddrinfo("fastapi-server.com", 80)[0][-1]
    s.connect(addr)

    # buat request HTTP POST dengan isi data JSON
    payload = "POST /data HTTP/1.0\r\nHost: fastapi-server.com\r\nContent-Length: {}\r\n\r\n{}".format(len(data_json), data_json)
    s.send(payload)

    # tunggu hingga response diterima
    response = s.recv(1024)

    # tutup koneksi
    s.close()
```

Anda juga dapat menggunakan protokol WebSocket untuk mengirimkan data secara realtime tanpa perlu membuat koneksi baru setiap kali mengirimkan data. Contoh kode berikut ini menggunakan library `websockets` pada Micropython dan memanfaatkan fitur WebSocket pada FastAPI:

```python
import ujson
import websockets

async def send_data_websocket(data):
    # buka koneksi WebSocket ke server FastAPI
    async with websockets.connect('ws://fastapi-server.com/data') as ws:
        # konversi data menjadi JSON string dan kirimkan ke server
        data_json = ujson.dumps(data)
        await ws.send(data_json)

        # tunggu hingga response diterima
        response = await ws.recv()

        # cetak response dari server
        print(response)
```

Pastikan Anda juga memiliki endpoint pada server FastAPI yang dapat menerima data yang dikirimkan dari Micropython. Dengan menggunakan library `websockets` maka kita perlu menambahkan handler WebSocket di dalam aplikasi FastAPI seperti ini:

```python
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/data")
async def receive_data(websocket: WebSocket):
    await websocket.accept()
    
    while True:
        # terima data dari client
        data_json = await websocket.receive_text()

        # lakukan sesuatu dengan data JSON
        # misalnya, simpan ke database atau kirimkan ke device lain

        # balas respons ke client
        await websocket.send_text("Data received successfully!")
```

Dengan begitu, ketika Micropython mengirimkan data ke endpoint `/data`, server FastAPI akan menerima data tersebut melalui protokol HTTP atau WebSocket dan melakukan sesuatu dengan data tersebut.